Integration with xyz.


SETUP
========================================================================
Create .NET Core 3.1 Class Library named {{integration name}}.Data
Register Nuget Dependencies
	-- NewtonsoftJSson (latest stable)
	-- RestSharp (latest stable)
Register Project Dependencies
	-- Integration.Abstract (from inside the solution)
Create empty subfolder structure
	-- Helpers
	-- Interface
	-- Models
	-- Utilities
Create Constants.cs 
	-- Copy iPaaS TM_MappingCollectionType enum
	-- Copy iPaaS TM_MappingDirection enum


BUILDING
========================================================================
Prepare Abstract Objects
	-- DataModels.AbstractIntegrationData
	-- DataModels.AbstractIntegrationDataWithCustomFields

Build Interfaces (Copied from BigCommerce.v3.Data)
	-- Executed Replace on Namespace across entire project (BigCommerce.v3.Data became Integration.Data)
	Modified properties and methods to match DotDigital best practices (In this order)
		-- Settings.cs
		-- Connection.cs
		-- CallWrapper.cs
		-- APICall.cs (renamed from BCAPICall, doesn't need to be named for the integration)
		-- TranslationUtilities.cs
		-- CustomFieldHandler
		-- ConversionFunctions 

Build Utilities
	-- StandardUtilities.cs
	-- Reflection Utilities.cs (Did not use)

Build a Model for each iPaaS TM_MappingCollectionType to be supported
Create Customer.cs in Model
Add properties for each external field 
Implement Abstract Methods:
	-- GetPrimaryId
	-- SetPrimaryId

Create CustomField.cs in Model
Add properties for each external field 
Implement Abstract Methods:
	-- GetPrimaryId
	-- SetPrimaryId

Create CustomerGroup.cs in Model
Add properties for each external field 
Implement Abstract Methods:
	-- GetPrimaryId
	-- SetPrimaryId

Changes:
========================================================================
Created an Identity Class to hold information specific to the Integration
Replaced objects that incorporated the Integration Name with a Generic Integration Term.  (BigCommerce became Integration)
Updated all Logging references to the Integration Name with the value from the Identity Class.

Notes/Questions:
========================================================================
LogHelper and many of the Interfaces look to be standardized code built for iPaaS rather than the integration.  Should consider moving it into the abstract.
Everything under iPaaSAPI seems pretty generic.  Should it be in here?

TODO:
========================================================================
Unsubscribe requires the use of Email.. Wanted to execute unsubscribe instead of delete, but wasn't sure how to initiate it other than by id
Need to identify if categoryid already exists as one of the address books the created/updated contact part of.  
	-- Must check If exists from a Lookup on the DotDigital side: when true, do not add the addressbook relationship. 
	-- See ContactAddressBooks_GET

Action and Action_CustomerFacing can be standardized based upon MappingCollection and Operation
Build an Error Model so that the engine can use handlers configured in the database

Use GetPrimaryId as a guide for how to implement abstract methods in the model to replace functions like GetDataById - so that instead of using switch, we can use the model itself.  
This request was initiated by a discussion to move the Class regions for each MappingCollection into the Model.  So this same format would be used for that as well.

TESTFOR: 
========================================================================
Search for text marked this way for TESTing requirements